시간순으로 작성

com.spring.bts

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
pom.xml 에서 변경할 것
 [8-2]. java version을 1.6 에서 1.8 로 변경하고, springframework 버전을 3.1.1을 4.3.4 로 변경한다.

  <properties>
      <java-version>1.8</java-version>
      <org.springframework-version>4.3.4.RELEASE</org.springframework-version>
      <org.aspectj-version>1.6.10</org.aspectj-version>
      <org.slf4j-version>1.6.6</org.slf4j-version>
  </properties>


  [8-3]. Servlet api 버전을 2.5 에서 3.1.0 로 변경한다.   
         여기에서는 artifactId 도 servlet-api 에서 javax.servlet-api 로 변경한다.

  <!-- Servlet -->
  <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
  </dependency>


  [8-4]. jsp api 버전을 2.1에서 2.3.1로 변경한다.
         여기에서는 artifactId 도 jsp-api 에서 javax.servlet.jsp-api 로 변경한다.

  <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>javax.servlet.jsp-api</artifactId>
      <version>2.3.1</version>
      <scope>provided</scope>
  </dependency>


  [8-5]. maven-compiler-plugin 설정에서 소스와 타겟을 1.6 에서 ${java-version} 또는 1.8로 변경한다.

  <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>2.5.1</version>   
      <configuration>
          <source>${java-version}</source>
          <target>${java-version}</target>
          <compilerArgument>-Xlint:all</compilerArgument>
         <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
      </configuration>
  </plugin>


 [8-6]. pom.xml 파일을 저장한다. 이때 우측하단부에 다운받는 표시가 나오는데 모두 완료될때 까지 기다리도록 한다.  

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  9. 이제 프로젝트 설정을 수정하기 위해서 프로젝트(Board) 오른쪽 버튼 클릭해서 Properties 를 선택한다.

 10. Java Build Path 를 선택한후 Libraries 탭에서 JRE System Library[JavaSE-1.6] 에 클릭하고 Edit 버튼을 클릭하여
      Workspace default JRE (jdk1.8.0_271)으로 변경하고 Finish 버튼을 클릭하고 Apply 를 클릭한다.

 11. Java Compiler 설정에서 Compiler compliance level 을 1.8로 지정한다. 
     Build Path 가 잘 설정되었다면 Compiler compliance level 이 1.8이 되어 있을 것이다.
     Apply 를 클릭한다. Compiler Setting Changed 창이 보이면 Yes 를 클릭한다.

 12. Project Facets에서 Dynamic Web Module 2.5를 3.1 으로 변경하고, java 1.6은 1.8로 변경한다. 
     Apply 를 클릭한다. 이어서 Apply and Close 버튼을 클릭하여 창을 닫는다.
     
     만약에 설정변경이 안되는 경우가 있다라면... 
     이 때는 STS를 종료한 후 프로젝트(Board) 폴더아래 .settings 폴더에 있는 
     org.eclipse.wst.common.project.facet.core.xml 파일을 텍스트 에디터로 열어서 
     직접 수정한 후 STS를 실행하고 다시 변경하면 된다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------------------------------------------------------------------------------------------------------------------------

 13. >>>> 오류 Cannot change version of project facet Dynamic Web Module to 3.0. 이 발생할 수 있으므로 아래와 같이 하도록 한다 <<<<
    
   해결책 : /프로젝트명(Board)/src/main/webapp/WEB-INF/web.xml 파일을 열어서 아래처럼 변경한다.

   <?xml version="1.0" encoding="UTF-8"?>
   <web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
        

------------------------------------------------------------------------------------------------------------   

 14.  >>>> /프로젝트명(Board)/src/main/webapp/WEB-INF/spring/root-context.xml 파일 수정하기 <<<<<

  ==> 파일뒤에 숫자는 모두 제거한다. 숫자를 제거한 것이 최신파일인 것이다.
  ==> 그리고 내용이 조금 바뀌었으므로 그대로 복사해서 사용하도록 한다.

 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"> 

------------------------------------------------------------------------------------------------------------

 15. >>>>  /프로젝트명(Board)/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 파일 수정하기 <<<<<

 ==> 파일뒤에 숫자는 모두 제거한다. 숫자를 제거한 것이 최신파일인 것이다.
 ==> 그리고 내용이 조금 바뀌었으므로 그대로 복사해서 사용하도록 한다.

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

 <annotation-driven /> 을
 <mvc:annotation-driven /> 으로 변경한다.

 <resources mapping="/resources/**" location="/resources/" /> 을
 <mvc:resources mapping="/resources/**" location="/resources/" />  으로 변경한다.

----------------------------------------------------------------------------------------------------------------

spring 은 lib에 담아서 쓰는게 아닌 maven을 사용

- https://mvnrepository.com/ 에서 ojdbc6 검색
=> 1. 설명란에 jdk 뭐시기 써있는거 클릭
=> 2. 버전 써있는 부분 클릭
=> 3. maven 안의 내용물 copy해야되는데 막힘
=> 4. 선생님이 주신 코드 복사(board에있다)

pom.xml 중 java-version 1.8 있는 /properties(15line) 과 

<dependencies>
<!-- Spring -->
사이에 아래 코드 붙여넣기
<!-- ===== #1. ojdbc.jar 를 받기 위한 리포지터리 주소 변경 =====  -->
	   <repositories> 
      <repository>
         <id>codelds</id>
            <url>https://code.lds.org/nexus/content/groups/main-repo</url>
      </repository>
      
      <!-- ===== 네이버 스마트 에디터에서 사진첨부 관련하여 이미지의 크기를 구하기위한 라이브러리 다운받는곳 =====  -->
      <repository>
          <id>osgeo</id>
          <name>OSGeo Release Repository</name>
          <url>https://repo.osgeo.org/repository/release/</url>
          <snapshots><enabled>false</enabled></snapshots>
          <releases><enabled>true</enabled></releases>
        </repository>
        
    </repositories>

----------------------------------------------------------------------------------------------------------------

<!-- Test --> 밑
</dependency> 와
</dependencies> 사이에 아래 코드 붙여넣기

라이브러리 다운받는 장소 windows-preferences-Maven-usersettings- local repository에 library 경로 있음


----------------------------------------------------------------------------------------------------------------
#12. 까지가 기본적으로 해야할 세팅!!

- web,xml 에서 *.페이지 명 및 웰컴페이지 설정 가능
- root-context.xml에서 오라클 경로 설정함!!!

***** 매퍼는 반드시 한 패키지만 사용하고 그 안에 xml 넣어야함!!!  
 - root-context.xml 에 매퍼 경로 나와있음.

#18. 이미지, 동영상, js, css 파일등이 위치하는 경로를 의미한다.
                            그 경로는 /webapp/resources 안에 넣어야 함

*** 수정해야 함 ***
- #22. expression="execution(public * com.spring..*Controller.*(..))" 
public 리턴타입 아무거나 패키지 com.spring.아무이름.controller.(파라미터 아무거나)

#23. 매우중요(타일 설정하는 곳)

<tiles-definitions>

	<!-- ==== tiles 를 사용하는 레이아웃(header,content,footer) 설정 시작 ==== -->
	<definition name="layout-tiles1"  template="/WEB-INF/tiles/layout/layout-tiles1.jsp"> ==> 레이아웃 명 정의 및 템플릿 저장경로
		<put-attribute name="header"  value="/WEB-INF/tiles/tile1/header.jsp" /> ==> 헤더를 넣을 것이고 헤더의 경로 표시
		<put-attribute name="content" value="" />			     ==> 내용물을 넣을 것이고 경로는 비워둠(밑에나옴)
		<put-attribute name="footer"  value="/WEB-INF/tiles/tile1/footer.jsp" /> ==> 푸터를 넣을 것이고 푸터의 경로 표시
	</definition>
	
	<definition name="*.tiles1" extends="layout-tiles1">			   ==> 정의된 이름이 *.tiles1이며  layout-tiles1 템플릿을 포함
		<put-attribute name="content" value="/WEB-INF/views/tiles1/{1}.jsp"/>  ==> 위처럼 정의된 이름일 시 content 영역에 들어가며, 경로는 그곳에 위치해야 한다.
	</definition>								ex) /WEB-INF/views/tiles1/tiles_test_1.jsp
	<definition name="*/*.tiles1" extends="layout-tiles1">			   ==> 정의된 이름이 "*/*.tiles1이며  layout-tiles1 템플릿을 포함
		<put-attribute name="content" value="/WEB-INF/views/tiles1/{1}/{2}.jsp"/> ==> 위처럼 정의된 이름일 시 content 영역에 들어가며, 경로는 그곳에 위치해야 한다.
	</definition>								ex) /WEB-INF/views/tiles1/test/tiles_test_2.jsp
	<definition name="*/*/*.tiles1" extends="layout-tiles1">			   ==> 정의된 이름이 "*/*/*.tiles1"이며  layout-tiles1 템플릿을 포함	
		<put-attribute name="content" value="/WEB-INF/views/tiles1/{1}/{2}/{3}.jsp"/> ==> 위처럼 정의된 이름일 시 content 영역에 들어가며, 경로는 그곳에 위치해야 한다.
	</definition>								ex) /WEB-INF/views/tiles1/test/sample/tiles_test_3.jsp

</tiles-definitions>


bean 충돌로 WAS 구동안되면
1. 패키지 안의 중복되는 이름을 바꾸거나
2. 패키지경로까지 포함해서 이름 정의(com.bts.*.*.boardDAO)
==> servlet-context.xml 에서 FullBeanNameGenerator 쓰면 알아서 2번 해줌
(대신 경로에 저 generator가 있어야 해요)

의존객체(DI : Dependency Injection)
- 핸드폰이 작동하려면 배터리가 있어야함
- 핸드폰의 의존객체는 배터리
==> 즉, dao에서 sql문을 실행하려면 sqlsession이 있어야 하고, 서비스에서 dao를 실행하려면 dao의존객체가 필요하다.

spring에선 느슨한결합(Bean 이용)으로 단단한결합(예 : InterBoardDAO bdao = new BoardDAO(); ) 필요없음
==> IOC(Inversion of Control, 제어역전)


Controller 에서 @ResponseBody(spring 써있는거 import) 사용하는 경우
- 일반적으로 JSON 값을 return 시 사용
/*
    @ResponseBody 란?
     메소드에 @ResponseBody Annotation이 되어 있으면 return 되는 값은 View 단 페이지를 통해서 출력되는 것이 아니라 
    return 되어지는 값 그 자체를 웹브라우저에 바로 직접 쓰여지게 하는 것이다. 일반적으로 JSON 값을 Return 할때 많이 사용된다.  
   
   >>> 스프링에서 json 또는 gson을 사용한 ajax 구현시 데이터를 화면에 출력해 줄때 한글로 된 데이터가 '?'로 출력되어 한글이 깨지는 현상이 있다. 
               이것을 해결하는 방법은 @RequestMapping 어노테이션의 속성 중 produces="text/plain;charset=UTF-8" 를 사용하면 
               응답 페이지에 대한 UTF-8 인코딩이 가능하여 한글 깨짐을 방지 할 수 있다. <<< 
  */
